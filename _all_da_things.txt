rock_paper_scissors: 2892 images
deep net (19 layers total, 4 conv layers): 
    model = tf.keras.Sequential([
        layers.Conv2D(64, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D(),
        layers.Dropout(0.1),

        layers.Conv2D(64, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D(),
        layers.Dropout(0.1),

        layers.Conv2D(128, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D(),
        layers.Dropout(0.2),

        layers.Conv2D(128, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D(),
        layers.Dropout(0.5),

        layers.Flatten(),
        layers.Dense(512, activation='elu'),
        layers.Dense(num_classes)
    ])
    "epochs": 100,
    "batch_size": 32,
    "learning_rate": 1e-3,
    "weight_decay": 1e-4,
    ------------------------------------------------------------------------------------------------------------------------
    deep aug (horiz_flip+rot+sat+brightness+contrast+hue+invert):
        Train: 0.996528, Val: 0.990079, Test: 1.000000
    deep aug, 50%:
        Train: 0.997024, Val: 1.000000, Test: 0.965054
    deep aug, 25%:
        Train: 0.990079, Val: 0.974206, Test: 0.948925
    shallow aug (horiz_flip+rot):
        Train: 0.999008, Val: 1.000000, Test: 0.876344
    shallow aug, 50%:
        Train: 0.959325, Val: 0.922619, Test: 0.870968
    shallow aug, 25%:
        Train: 0.783730, Val: 0.714286, Test: 0.741935
    //No augmentation training overfitted very fast and then started wiggling around with different test accuracies)
    no aug:
        Train: 1.000000, Val: 1.000000, Test: 0.833333 
    no aug, 50%:
        Train: 0.988095, Val: 0.974206, Test: 0.629032 (idk why this is so much lower than next one)
    no aug, 25%:
        Train: 1.000000, Val: 0.988095, Test: 0.725806
shallow net (8 layers total, 2 conv layers):
    model = tf.keras.Sequential([
        layers.Conv2D(64, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D(),

        layers.Conv2D(128, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D(),
        layers.Dropout(0.3),

        layers.Flatten(),
        layers.Dense(num_classes)
    ])
    "epochs": 50,
    "batch_size": 32,
    "learning_rate": 2e-4,
    "weight_decay": 1e-4,
    ------------------------------------------------------------------------------------------------------------------------
    deep aug (horiz_flip+rot+sat+brightness+contrast+hue+invert):
        Train: 0.977183, Val: 0.813492, Test: 0.881720
    deep aug, 50%:
        Train: 0.963294, Val: 0.960317, Test: 0.849462
    deep aug, 25%:
        Train: 0.819444, Val: 0.718254, Test: 0.822581
    shallow aug (horiz_flip+rot):
        Train: 0.828869, Val: 0.944444, Test: 0.672043
    shallow aug, 50%:
        Train: 0.743056, Val: 0.865079, Test: 0.653226
    shallow aug, 25%:
        Train: 0.882937, Val: 0.841270, Test: 0.602151
    no aug:
        Train: 1.000000, Val: 1.000000, Test: 0.744624
    no aug, 50%:
        Train: 1.000000, Val: 0.988095, Test: 0.653226
    no aug, 25%:
        Train: 1.000000, Val: 0.980159, Test: 0.680108

cifar10: 60000 images
deep net (27 layers total, 8 conv layers):
    model = tf.keras.Sequential([
        layers.Conv2D(16, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.BatchNormalization(),
        layers.Conv2D(16, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D(),
        layers.Dropout(0.1),

        layers.Conv2D(32, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.BatchNormalization(),
        layers.Conv2D(32, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D(),
        layers.Dropout(0.2),

        layers.Conv2D(64, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.BatchNormalization(),
        layers.Conv2D(64, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D(),
        layers.Dropout(0.3),

        layers.Conv2D(128, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.BatchNormalization(),
        layers.Conv2D(128, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.BatchNormalization(),
        layers.MaxPooling2D(),
        layers.Dropout(0.4),

        layers.Flatten(),
        layers.Dense(1024, activation='elu'),
        layers.Dense(num_classes, activation='softmax')
    ])
    "epochs": 128,
    "batch_size": 128,
    "learning_rate": 5e-4,
    "weight_decay": 1e-4,
    ------------------------------------------------------------------------------------------------------------------------
    deep aug (horiz_flip+rot+sat+brightness+contrast+hue+invert):
        Train: 0.844475, Val: 0.783100, Test: 0.783500
    deep aug, 50%:
        Train: 0.829750, Val: 0.761800, Test: 0.755900
    deep aug, 25%:
        Train: 0.812500, Val: 0.699800, Test: 0.694200
    shallow aug (horiz_flip+rot+brightness):
        Train: 0.880525, Val: 0.828800, Test: 0.823600
    shallow aug, 50%:
        Train: 0.858500, Val: 0.764100, Test: 0.755700
    shallow aug, 25%:
        Train: 0.854600, Val: 0.704700, Test: 0.704100
    no aug:
        Train: 0.996550, Val: 0.835100, Test: 0.833000
    no aug, 50%:
        Train: 0.998800, Val: 0.790200, Test: 0.793900
    no aug, 25%:
        Train: 0.999700, Val: 0.741700, Test: 0.728200
shallow net (7 layers total, 2 conv layers):
    model = tf.keras.Sequential([
        layers.Conv2D(64, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.MaxPooling2D(),
        layers.Dropout(0.05),

        layers.Conv2D(128, 3, padding='same', kernel_regularizer=regularizers.l2(test['weight_decay']), activation='elu'),
        layers.MaxPooling2D(),

        layers.Flatten(),
        layers.Dense(num_classes, activation='softmax')
    ])
    "epochs": 64,
    "batch_size": 128,
    "learning_rate": 5e-4,
    "weight_decay": 1e-4,
    ------------------------------------------------------------------------------------------------------------------------
    deep aug (horiz_flip+rot+sat+brightness+contrast+hue+invert):
        Train: 0.625950, Val: 0.598100, Test: 0.595700
    deep aug, 50%:
        Train: 0.591150, Val: 0.582400, Test: 0.580000
    deep aug, 25%:
        Train: 0.608300, Val: 0.539800, Test: 0.542300
    shallow aug (horiz_flip+rot+brightness):
        Train: 0.688450, Val: 0.668900, Test: 0.662500
    shallow aug, 50%:
        Train: 0.662400, Val: 0.629000, Test: 0.629800
    shallow aug, 25%:
        Train: 0.678100, Val: 0.612500, Test: 0.619500
    no aug:
        Train: 0.757575, Val: 0.664900, Test: 0.666000
    no aug, 50%:
        Train: 0.766200, Val: 0.625000, Test: 0.633300
    no aug, 25%:
        Train: 0.961700, Val: 0.585300, Test: 0.595700

cats_vs_dogs: 23262 images
deep net (16 layers total, 8 conv layers):
    model = tf.keras.Sequential([
        layers.Conv2D(16, 3, padding='same', activation='relu'),
        layers.Conv2D(16, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(),
        layers.Conv2D(32, 3, padding='same', activation='relu'),
        layers.Conv2D(32, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(),
        layers.Conv2D(64, 3, padding='same', activation='relu'),
        layers.Conv2D(64, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(),
        layers.Conv2D(128, 3, padding='same', activation='relu'),
        layers.Conv2D(128, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(),
        layers.Flatten(),
        layers.Dense(1024, activation='relu'),
        layers.Dropout(0.1),
        layers.Dense(num_classes)
    ])
    "epochs": 128,
    "batch_size": 128,
    "learning_rate": 1e-3,
    "weight_decay": 1e-4,
    ------------------------------------------------------------------------------------------------------------------------
    deep aug (horiz_flip+rot+sat+brightness+contrast+hue+invert):
        Train: 0.974476, Val: 0.938091, Test: 0.950989
    deep aug, 50%:
        Train: 0.974960, Val: 0.894239, Test: 0.913586
    deep aug, 25%:
        Train: 0.955718, Val: 0.855976, Test: 0.867154
    shallow aug (horiz_flip+rot+brightness):
        Train: 0.976034, Val: 0.944540, Test: 0.950989
    shallow aug, 50%:
        Train: 0.980226, Val: 0.856406, Test: 0.870593
    shallow aug, 25%:
        Train: 0.981513, Val: 0.850817, Test: 0.872313
    no aug:
        Train: 1.000000, Val: 0.837919, Test: 0.856836
    no aug, 50%:
        Train: 0.916497, Val: 0.806535, Test: 0.814273
    no aug, 25%:
        Train: 0.804815, Val: 0.746346, Test: 0.754084
shallow net (7 layers total, 2 conv layers):
    model = tf.keras.Sequential([
        layers.Conv2D(32, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(),
        layers.Conv2D(64, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(),
        layers.Flatten(),
        layers.Dense(1024, activation='relu'),
        layers.Dropout(0.1),
        layers.Dense(num_classes)
    ])
    "epochs": 64,
    "batch_size": 128,
    "learning_rate": 1e-3,
    "weight_decay": 1e-4,
    ------------------------------------------------------------------------------------------------------------------------
    deep aug (horiz_flip+rot+sat+brightness+contrast+hue+invert):
        Train: 0.867114, Val: 0.809974, Test: 0.838349
    deep aug, 50%:
        Train: 0.854272, Val: 0.774721, Test: 0.796647
    deep aug, 25%:
        Train: 0.831040, Val: 0.758813, Test: 0.781599
    shallow aug (horiz_flip+rot+brightness):
        Train: 0.867222, Val: 0.787618, Test: 0.799656
    shallow aug, 50%:
        Train: 0.910478, Val: 0.752795, Test: 0.769132
    shallow aug, 25%:
        Train: 0.780739, Val: 0.701634, Test: 0.693035
    no aug:
        Train: 0.997958, Val: 0.741187, Test: 0.748495
    no aug, 50%:
        Train: 1.000000, Val: 0.711522, Test: 0.735168
    no aug, 25%:
        Train: 1.000000, Val: 0.705933, Test: 0.719261

svhn_cropped (digits): 99289 images
deep net (17 layers total, 8 conv layers):
    model = tf.keras.Sequential([
        layers.Conv2D(16, 3, padding='same', activation='relu'),
        layers.Conv2D(16, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(),
        layers.Conv2D(32, 3, padding='same', activation='relu'),
        layers.Conv2D(32, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(),
        layers.Dropout(0.1),
        layers.Conv2D(64, 3, padding='same', activation='relu'),
        layers.Conv2D(64, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(),
        layers.Conv2D(128, 3, padding='same', activation='relu'),
        layers.Conv2D(128, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(),
        layers.Flatten(),
        layers.Dense(1024, activation='relu'),
        layers.Dropout(0.3),
        layers.Dense(num_classes)
    ])
    "augment": "deep",
    "epochs": 256,
    "batch_size": 128,
    "learning_rate": 1e-3,
    "weight_decay": 1e-4,
    ------------------------------------------------------------------------------------------------------------------------
    deep aug (horiz_flip+rot+sat+brightness+contrast+hue+invert):
        Train: 0.918831, Val: 0.907924, Test: 0.920905
    deep aug, 50%:
        Train: 0.927550, Val: 0.898437, Test: 0.911033
    deep aug, 25%:
        Train: 0.935636, Val: 0.879121, Test: 0.887062
    shallow aug (horiz_flip+rot):
        Train: 0.889721, Val: 0.890656, Test: 0.900699
    shallow aug, 50%:
        Train: 0.900590, Val: 0.881851, Test: 0.888599
    shallow aug, 25%:
        Train: 0.880486, Val: 0.857894, Test: 0.863898
    no aug:
        Train: 0.989250, Val: 0.917071, Test: 0.917448
    no aug, 50%:
        Train: 0.993516, Val: 0.903420, Test: 0.903311
    no aug, 25%:
        Train: 0.993038, Val: 0.885127, Test: 0.885910
shallow net (7 layers total, 2 conv layers):
    model = tf.keras.Sequential([
        layers.Conv2D(32, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(),
        layers.Conv2D(64, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(),
        layers.Flatten(),
        layers.Dense(1024, activation='relu'),
        layers.Dropout(0.3),
        layers.Dense(num_classes)
    ])
    "augment": "deep",
    "epochs": 256,
    "batch_size": 128,
    "learning_rate": 1e-3,
    "weight_decay": 1e-4,
    ------------------------------------------------------------------------------------------------------------------------
    deep aug (horiz_flip+rot+sat+brightness+contrast+hue+invert):
        Train: 0.898304, Val: 0.888608, Test: 0.888330
    deep aug, 50%:
        Train: 0.923455, Val: 0.883899, Test: 0.880378
    deep aug, 25%:
        Train: 0.936864, Val: 0.858508, Test: 0.849339
    shallow aug (horiz_flip+rot):
        Train: 0.931404, Val: 0.860760, Test: 0.850761
    shallow aug, 50%:
        Train: 0.940484, Val: 0.861579, Test: 0.841964
    shallow aug, 25%:
        Train: 0.938025, Val: 0.832776, Test: 0.804856
    no aug:
        Train: 0.991793, Val: 0.897072, Test: 0.888906
    no aug, 50%:
        Train: 0.996178, Val: 0.878097, Test: 0.866011
    no aug, 25%:
        Train: 0.992151, Val: 0.852433, Test: 0.840312